#! /bin/bash

#set -Eeuo pipefail
#trap 'echo "${BASH_SOURCE}:${LINENO}:${FUNCNAME:-}"' ERR

# Receber o link de download!!
echo -e "\e[01;35mCole abaixo a URL do vídeo para fazer o download!\e[01;32m"
read -p "Link: " LINK
echo -e "\e[00m"
if [ -n "$LINK" ];then
	echo "Baixado..."
else
	echo -e "\e[01;31mERRO!!! Saindo por que não foi passado o link de download.\e[00m"
	exit 1
fi

# Variaveis
PWD="$(pwd)"
NOME=""

#### Checar dependencias
if [ -z $(which curl) ];then
    echo "Dependencia faltando "curl", instale-a. Ex: Debian/Ubuntu "sudo apt install curl""
    exit 1
fi
if [ -z $(which ffmpeg) ];then
    echo "Dependencia faltando "ffmpeg", instale-a. Ex: Debian/Ubuntu "sudo apt install ffmpeg""
    exit 1
fi
if [ -z $(which xxd) ];then
    echo "Dependencia faltando "xxd", instale-a. Ex: Debian/Ubuntu "sudo apt install xxd""
    exit 1
fi

#### Checando os argumentos passados.
if [ "$1" = "-h" -o "$1" = "--help" ];then
    echo
    echo
    echo " -o              Nome do arquivo de saída."
    echo " --no-remove     não apagar as partes do vídeo, depois de concluído? (padrão apagar)."
    echo
    echo
    echo "Ex. ts-download -o meu_video.mp4"
    exit 1
fi

#### Definido nome do arquivo, se não for especificado ou for igual a arquivo presente na pasta atual.
if [ "$1" = "-o" ];then
    NOME=$2
elif [ "$2" = "-o" ];then
    NOME=$3
elif [ -z "$NOME" ];then
    NOME="${LINK%/*}"
    NOME="${NOME##*/}.mp4"
fi
# tratando se nome de arquivo já existir.
COUNT=1
MOD="true"
while [ -e $NOME ];do
    #echo "Print Nome nº $COUNT  -> "$NOME
    if [ "$MOD" = "true" ];then
        NOME=${NOME/./"_$COUNT."}
    else
        NOME="${NOME%%_*}_$COUNT.mp4"
    fi
    ((COUNT++))
    MOD="false"
done
#garantindo que não se crie outro arquivo com mesmo nome no intervalo do download.
touch $NOME

# ###-------------------------------------------------------

#### Criando pasta temporaria para download dos videos.
mkdir "/tmp/tmp-vid-$$"
PASTA="/tmp/tmp-vid-$$"
echo 
echo "Trabalhando na pasta temporária: $PASTA"
echo 
M3U8="/tmp/tmp-vid-$$/arq_m3u8.m3u8"
CFG_Curl="/tmp/tmp-vid-$$/lista_down_curl.txt"
VID_LS="/tmp/tmp-vid-$$/lista-videos-para-ffmpeg.txt"
echo "Arquivos vão estar em $PWD"
echo "."
echo "."
echo "."

#### Erro de processamento da opção -o.
if [ "$1" = "-o" -a -z "$2" -o "$2" = "-o" -a -z "$3" ];then
    echo "Opção -o carece de uma string ex. '-o saida-video.mp4'"
    exit
fi
# ----------------------------------

#### Comando de download.

    echo "Fazendo o Download..."

    curl --connect-timeout 10 --retry 3 -s -o $M3U8 -f "${LINK%/*}/{index,icon}.m3u8"

    #### Definindo downloads simultaneos.
    IND_FIM=$(tail -n 2 $M3U8 | awk 'gsub("[a-zA-Z./#-]","")')
    if [ "$IND_FIM" -gt 100 ];then
        PRL="--parallel-max 10"
    else
        PRL="--parallel-max 4"
    fi
    ###

    #### Configurando lista de download.
    Var_cond=0
    while IFS= read -r linha || [[ -n "$linha" ]];do
        #echo $linha
        if [[ "${linha:0:1}" = "#" ]];then
            echo "$linha" >> $CFG_Curl
        else
            echo "${linha/"${linha:0:1}"/"url = ${LINK%/*}/${linha:0:1}"}" >> $CFG_Curl
        fi
    done < $M3U8
    # ###

    curl -s --parallel-immediate -Z $PRL --output-dir $PASTA --remote-name-all -K $CFG_Curl

    echo ".*."

echo "."
echo "."
#### Juntando arquivos e terminando o processo

# Verificando se baixou todos os arquivos e corrigindo criptografia.
echo -e "Checando arquivos baixados!\n."
while IFS= read -r linha || [[ -n "$linha" ]];do
    # Baixando arquivos que faltaram
    while [ "${linha:0:1}" != "#" -a ! -e $PASTA/$linha ];do
    echo "Baixando arquivos que faltaram por erro! -- $linha"
        curl -s --output-dir $PASTA $START "${LINK%/*}/$linha}"
    done

    # Corrigindo criptografia.
    if [ "${linha:0:1}" != "#" ];then

        # definindo o byte de inicio do arquivo ###
        SEEK="0x$(xxd -c 2 -l 1000 "$PASTA/$linha" | awk '/G@/{split($1, a, ":"); print a[1];exit}')"
        if [ "$SEEK" = "0x" ];then
            SEEK="0x$(xxd -s 1 -c 2 -l 1000 "$PASTA/$linha" | awk '/G@/{split($1, a, ":"); print a[1];exit}')"
        fi
        # ###

        # Modificando os arquivos necessarios ###
        if [ "$SEEK" != "0x00000000" ];then
            xxd -s $SEEK "$PASTA/$linha" | xxd -r -s -$SEEK > "$PASTA/${linha%.*}.ts"
            rm "$PASTA/$linha"
            echo "file  $PASTA/${linha%.*}.ts" >> $VID_LS

        elif [ "$SEEK" = "0x00000000" ];then
            echo "file  $PASTA/$linha" >> $VID_LS
        fi
        # ###
    fi


done < $M3U8
echo ".*."
echo "."

if [ -e "$VID_LS" ];then
    echo "Juntando os pedaços.."
    echo "."
    Coment="${LINK%/*}"
    Coment="Id do vídeo: ${Coment##*/}  <-- | --> Url de download: $LINK"
    ###--- remover arquivo de proteção criado antes!
    rm $NOME
    ###---
    ffmpeg -v 8 -f concat -safe 0 -i $VID_LS -metadata comment="$Coment" -c copy "$NOME"
    if [ "$?" -eq 1 ];then
        echo "Saindo por erro na hora de juntar os pedaços com ffmpeg"
        exit 1
    fi
    echo "."
    #### Removendo arquivos temporarios.
    if [ "$1" = "--no-remove" -o "$2" = "--no-remove" ];then
        echo "Pedaços baixado do vídeo em: $PASTA/"
        echo ".."
    else
        echo "Removendo pedaços do vídeo e pasta temporaria!"
        echo "."
        rm $PASTA/*
        rm -dv $PASTA
    fi
    echo "Nome e local do arquivo baixado:"
    echo "$PWD/$NOME"
fi
echo "Concluido!!"

exit 0
